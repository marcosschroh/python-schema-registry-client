[tool.poetry]
name = "python-schema-registry-client"
version = "2.6.0"
description = "Python Rest Client to interact against Schema Registry confluent server"
authors = ["Marcos Schroh <schrohm@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "schema_registry"}]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development",
]

[tool.poetry.dependencies]
python = "^3.8"
fastavro = "^1.7.3"
jsonschema = "^4.17.3"
httpx = ">=0.26,<0.28"
aiofiles = "^23.1.0"
faust-streaming = {version = ">=0.10.11,<0.12.0", optional = true}

[tool.poetry.group.dev.dependencies]
mypy = "^1"
ruff = ">=0.2,<0.5"
pytest = ">=7,<9"
pytest-cov = ">=4,<6"
pytest-mock = "^3.10.0"
pytest-asyncio = ">=0.21,<0.24"
dataclasses-avroschema = {version = ">=0.57,<0.61", extras = ["pydantic", "faker"]}
codecov = "^2.1.13"
types-aiofiles = "^23.1.0.2"
types-jsonschema = "^4.17.0.7"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1"
mkdocs-material = "^9"
mkdocstrings = {extras = ["python"], version = ">=0.21.2,<0.26.0"}

[tool.poetry.group.ci-publish.dependencies]
commitizen = "^3"

[tool.poetry.extras]
faust = ["faust-streaming"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
allow_empty_bodies = true

[tool.ruff]
line-length = 120
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    ".venv",
]

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
select = [
    "B",  # flake8-bugbear
    "C",  # flake8-comprehensions
    "D100",  # pydocstyle: public module docstring
    "D101",  # pydocstyle: docstring in public class
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "S",  # bandit
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D",
    "S",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.commitizen]
version_provider = "poetry"
tag_format = "v$version"
update_changelog_on_bump = true
